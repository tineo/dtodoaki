<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

$a = new \Doctrine\DBAL\Configuration();

$b = new \Doctrine\DBAL\Logging\LoggerChain();
$b->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->load('getMonolog_Logger_DoctrineService.php')) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : ($this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))) && false ?: '_'}));
$b->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : ($this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack())) && false ?: '_'});

$a->setSQLLogger($b);
$c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);

$d = new \Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter();
$e = ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->getVichUploader_MetadataReaderService()) && false ?: '_'};
$f = ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->load('getVichUploader_UploadHandlerService.php')) && false ?: '_'};

$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\CleanListener('image', $d, $e, $f));
$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\CleanListener('avatar_image', $d, $e, $f));
$c->addEventSubscriber(new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->load('getFosUser_Util_PasswordUpdaterService.php')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'}));
$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\RemoveListener('image', $d, $e, $f));
$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\UploadListener('image', $d, $e, $f));
$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\RemoveListener('avatar_image', $d, $e, $f));
$c->addEventSubscriber(new \Vich\UploaderBundle\EventListener\Doctrine\UploadListener('avatar_image', $d, $e, $f));
$c->addEventListener([0 => 'loadClassMetadata'], ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : ($this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener())) && false ?: '_'});
$c->addEventListener([0 => 'postUpdate'], ${($_ = isset($this->services['directory_platform.order_subscriber']) ? $this->services['directory_platform.order_subscriber'] : ($this->services['directory_platform.order_subscriber'] = new \DirectoryPlatform\AppBundle\EventListener\OrderSubscriber($this))) && false ?: '_'});

return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : ($this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))) && false ?: '_'}->createConnection(['driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => NULL, 'dbname' => 'dtodoaqui', 'user' => 'root', 'password' => 'megamisama', 'charset' => 'UTF8', 'driverOptions' => [], 'defaultTableOptions' => []], $a, $c, []);
