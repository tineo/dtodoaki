<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'payum.builder' shared service.

$this->services['payum.builder'] = $instance = new \Payum\Core\PayumBuilder();

$a = new \Payum\Core\Bridge\Symfony\Builder\CoreGatewayFactoryBuilder();
$a->setContainer($this);

$instance->setMainRegistry(${($_ = isset($this->services['payum.static_registry']) ? $this->services['payum.static_registry'] : $this->load('getPayum_StaticRegistryService.php')) && false ?: '_'});
$instance->setHttpRequestVerifier(new \Payum\Core\Bridge\Symfony\Builder\HttpRequestVerifierBuilder());
$instance->setTokenFactory(new \Payum\Core\Bridge\Symfony\Builder\TokenFactoryBuilder(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->getRouterService()) && false ?: '_'}));
$instance->setTokenStorage(${($_ = isset($this->services['payum.security.token_storage']) ? $this->services['payum.security.token_storage'] : $this->load('getPayum_Security_TokenStorageService.php')) && false ?: '_'});
$instance->setGenericTokenFactoryPaths(['capture' => 'payum_capture_do', 'notify' => 'payum_notify_do', 'authorize' => 'payum_authorize_do', 'refund' => 'payum_refund_do', 'cancel' => 'payum_cancel_do', 'payout' => 'payum_payout_do']);
$instance->setCoreGatewayFactory($a);
$instance->addCoreGatewayFactoryConfig(['payum.template.layout' => '@PayumCore\\layout.html.twig', 'payum.template.obtain_credit_card' => '@PayumSymfonyBridge\\obtainCreditCard.html.twig', 'payum.paths' => ['PayumSymfonyBridge' => ($this->targetDirs[3].'/vendor/payum/core/Payum/Core/Bridge/Symfony/Resources/views')], 'payum.action.get_http_request' => ${($_ = isset($this->services['payum.action.get_http_request']) ? $this->services['payum.action.get_http_request'] : $this->load('getPayum_Action_GetHttpRequestService.php')) && false ?: '_'}, 'payum.action.obtain_credit_card' => ${($_ = isset($this->services['payum.action.obtain_credit_card_builder']) ? $this->services['payum.action.obtain_credit_card_builder'] : $this->load('getPayum_Action_ObtainCreditCardBuilderService.php')) && false ?: '_'}]);
$instance->addGateway('paypal_express_checkout', ['factory' => 'paypal_express_checkout', 'username' => NULL, 'password' => NULL, 'signature' => NULL, 'sandbox' => true]);
$instance->addCoreGatewayFactoryConfig(['twig.env' => '@twig']);
$instance->addCoreGatewayFactoryConfig(['payum.extension.psr_logger' => '@payum.extension.logger', 'payum.extension.log_executed_actions' => '@payum.extension.log_executed_actions', 'payum.extension.profile_collector' => '@payum.profiler.payum_collector', 'payum.prepend_extensions' => [0 => 'payum.extension.profile_collector'], 'payum.extension.payum.extension.storage.directoryplatform_appbundle_entity_payment' => '@payum.extension.storage.directoryplatform_appbundle_entity_payment']);

return $instance;
